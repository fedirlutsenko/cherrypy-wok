#
# Project Kimchi
#
# Copyright IBM, Corp. 2013
#
# Authors:
#  Anthony Liguori <aliguori@us.ibm.com>
#  Adam Litke <agl@linux.vnet.ibm.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
#

import libvirt
import os
import platform


from ConfigParser import SafeConfigParser
from glob import iglob


from kimchi.xmlutils import xpath_get_text


DEFAULT_LOG_LEVEL = "debug"


def get_prefix():
    if __file__[0] == '/':
        base = os.path.dirname(__file__)
    else:
        base = os.path.dirname('./%s' % __file__)

    if os.access('%s/../../src/kimchi/config.py' % base, os.F_OK):
        return '%s/../..' % base
    else:
        return '@pkgdatadir@'


def without_installation():
    return get_prefix() != '@pkgdatadir@'


def get_config_dir():
    prefix = get_prefix()

    if prefix == '@pkgdatadir@':
        return '@sysconfdir@/kimchi'
    else:
        return os.path.join(prefix, 'src')


def _get_kimchi_src_dir():
    prefix = get_prefix()
    return ('@kimchidir@' if prefix == '@pkgdatadir@'
            else os.path.join(prefix, 'src/kimchi'))


def get_api_schema_file():
    return os.path.join(_get_kimchi_src_dir(), 'API.json')


def get_default_log_dir():
    prefix = get_prefix()

    if prefix == '@pkgdatadir@':
        return "@localstatedir@/log/kimchi"

    return os.path.join(prefix, 'log')


def get_state_path():
    prefix = get_prefix()

    if prefix == '@pkgdatadir@':
        return "@localstatedir@/lib/kimchi"

    return os.path.join(prefix, 'data')


def get_session_path():
    return os.path.join(get_state_path(), 'sessions')


def get_object_store():
    return os.path.join(get_prefix(), 'data', 'objectstore')


def get_distros_store():
    return os.path.join(get_config_dir(), 'distros.d')


def get_template_path(resource):
    return '%s/ui/pages/%s.tmpl' % (get_prefix(), resource)


def get_screenshot_path():
    return "%s/data/screenshots" % get_prefix()


def get_mo_path():
    return '%s/mo' % get_prefix()


def get_support_language():
    mopath = "%s/*" % get_mo_path()
    return [path.rsplit('/', 1)[1] for path in iglob(mopath)]


def find_qemu_binary():
    try:
        connect = libvirt.open('qemu:///system')
    except Exception, e:
        raise Exception("Unable to get qemu binary location: %s" % e)
    try:
        xml = connect.getCapabilities()
        expr = "/capabilities/guest/arch[@name='%s']\
                /domain[@type='kvm']/emulator" % platform.machine()
        res = xpath_get_text(xml, expr)
        location = res[0]
    except Exception, e:
        raise Exception("Unable to get qemu binary location: %s" % e)
    finally:
        connect.close()
    return location


def get_debugreports_path():
    return os.path.join(get_prefix(), 'data', 'debugreports')


def get_plugins_dir():
    prefix = get_prefix()
    if prefix == '@pkgdatadir@':
        prefix = '@kimchidir@'
    return os.path.join(prefix, 'plugins')


def get_plugin_config(name):
    prefix = get_prefix()
    if prefix == '@pkgdatadir@':
        base_dir = '@sysconfdir@/kimchi/plugins.d/'
    else:
        base_dir = os.path.join(prefix, 'plugins')
    return os.path.join(base_dir, '%s/%s.conf' % (name, name))


def _get_plugin_ui_dir(name):
    prefix = get_prefix()
    if prefix == '@pkgdatadir@':
        base_dir = '@pkgdatadir@/plugins/'
    else:
        base_dir = os.path.join(prefix, 'plugins')
    return os.path.join(base_dir, '%s/ui' % name)


def get_plugin_tab_xml(name):
    return os.path.join(_get_plugin_ui_dir(name), 'config/tab-ext.xml')


def _get_config():
    config = SafeConfigParser()
    config.add_section("server")
    config.set("server", "host", "0.0.0.0")
    config.set("server", "port", "8000")
    config.set("server", "ssl_port", "8001")
    config.set("server", "ssl_cert", "")
    config.set("server", "ssl_key", "")
    config.set("server", "environment", "development")
    config.add_section("logging")
    config.set("logging", "log_dir", get_default_log_dir())
    config.set("logging", "log_level", DEFAULT_LOG_LEVEL)
    config.add_section("display")
    config.set("display", "display_proxy_port", "64667")

    config_file = os.path.join(get_config_dir(), 'kimchi.conf')
    if os.path.exists(config_file):
        config.read(config_file)
    return config


config = _get_config()


if __name__ == '__main__':
    print get_prefix()
