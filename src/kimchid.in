#!/usr/bin/python
#
# Project Kimchi
#
# Copyright IBM, Corp. 2013
#
# Authors:
#  Anthony Liguori <aliguori@us.ibm.com>
#  Adam Litke <agl@linux.vnet.ibm.com>
#  Aline Manera <alinefm@br.ibm.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import logging
import os
import sys
sys.path.insert(1, '@pythondir@')

import kimchi.server
import kimchi.config

from ConfigParser import SafeConfigParser
from optparse import OptionParser

ACCESS_LOG = "kimchi-access.log"
ERROR_LOG = "kimchi-error.log"
CONFIG_FILE = "%s/kimchi.conf" % kimchi.config.get_config_dir()
DEFAULT_LOG_DIR = kimchi.config.get_default_log_dir()
DEFAULT_LOG_LEVEL = "debug"

def main(options):
    config = SafeConfigParser()
    config.add_section("server")
    config.set("server", "host", "localhost")
    config.set("server", "port", "8000")
    config.set("server", "ssl_port", "8001")
    config.set("server", "ssl_cert", "")
    config.set("server", "ssl_key", "")
    config.set("server", "environment", "development")
    config.add_section("logging")
    config.set("logging", "log_dir", DEFAULT_LOG_DIR)
    config.set("logging", "log_level", DEFAULT_LOG_LEVEL)

    if os.path.exists(CONFIG_FILE):
        config.read(CONFIG_FILE)

    host = config.get("server", "host")
    port = config.get("server", "port")
    ssl_port = config.get("server", "ssl_port")
    runningEnv = config.get('server', 'environment')
    logDir = config.get("logging", "log_dir")
    logLevel = config.get("logging", "log_level")

    parser = OptionParser()
    parser.add_option('--host', type="string", default=host, help="Hostname to listen on")
    parser.add_option('--port', type="int", default=port, help="Port to listen on")
    parser.add_option('--ssl-port', type="int", default=ssl_port, help="Enable a SSL server on the given port")
    parser.add_option('--log-level', default=logLevel, help="Logging level")
    parser.add_option('--access-log', default=os.path.join(logDir,ACCESS_LOG), help="Access log file")
    parser.add_option('--error-log', default=os.path.join(logDir,ERROR_LOG), help="Error log file")
    parser.add_option('--environment', default=runningEnv, help="Running environment of kimchi server")
    parser.add_option('--test', action='store_true', help="Run server in mock model")
    (options, args) = parser.parse_args()

    # Add non-option arguments
    setattr(options, 'ssl_cert', config.get('server', 'ssl_cert'))
    setattr(options, 'ssl_key', config.get('server', 'ssl_key'))

    kimchi.server.main(options)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
